name: Build Packages

on:
  push:
    branches: [ main ]
    paths:
      - 'pkgbuilds/**'
      - '.github/workflows/build-packages.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'pkgbuilds/**'
      - '.github/workflows/build-packages.yml'
  workflow_dispatch:

jobs:
  build-rust-services:
    name: Build Rust AVF Services
    runs-on: ubuntu-24.04-arm
    strategy:
      fail-fast: false
      matrix:
        package:
          - avf-forwarder-guest
          - avf-forwarder-guest-launcher
          - avf-shutdown-runner
          - avf-storage-balloon-agent

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install arch-chroot tool
        run: |
          sudo apt-get update
          sudo apt-get install -y arch-install-scripts

      - name: Cache Arch Linux ARM chroot
        id: cache-chroot
        uses: actions/cache@v4
        with:
          path: /tmp/chroot-cache.tar.zst
          key: archlinuxarm-chroot-rust-${{ hashFiles('.github/workflows/build-packages.yml') }}
          restore-keys: |
            archlinuxarm-chroot-rust-

      - name: Setup Arch Linux ARM chroot
        run: |
          if [ -f /tmp/chroot-cache.tar.zst ]; then
            echo "Restoring chroot from cache..."
            sudo mkdir -p /chroot
            sudo tar -xf /tmp/chroot-cache.tar.zst -C /
          else
            echo "Setting up new chroot..."
            # Download and extract Arch Linux ARM bootstrap
            wget http://os.archlinuxarm.org/os/ArchLinuxARM-aarch64-latest.tar.gz
            sudo mkdir -p /chroot
            sudo tar -xzf ArchLinuxARM-aarch64-latest.tar.gz -C /chroot

            # Disable CheckSpace in pacman (GitHub Actions limitation)
            sudo sed -i 's/^CheckSpace/#CheckSpace/' /chroot/etc/pacman.conf

            # Initialize and upgrade system
            sudo arch-chroot /chroot pacman-key --init
            sudo arch-chroot /chroot pacman-key --populate archlinuxarm
            sudo arch-chroot /chroot pacman -Syu --noconfirm

            # Install build dependencies
            sudo arch-chroot /chroot pacman -S --noconfirm base-devel git rust cargo protobuf bcc

            # Cache the chroot for next time
            echo "Caching chroot..."
            sudo tar -cf /tmp/chroot-cache.tar.zst -C / chroot
          fi

          # Create builder user and build directory (always needed)
          sudo arch-chroot /chroot useradd -m builder 2>/dev/null || true
          sudo mkdir -p /chroot/build
          sudo arch-chroot /chroot chown -R builder:builder /build

      - name: Copy PKGBUILD to chroot
        run: |
          sudo mkdir -p /chroot/build
          sudo cp -r pkgbuilds/${{ matrix.package }}/* /chroot/build/
          sudo arch-chroot /chroot chown -R builder:builder /build

      - name: Build ${{ matrix.package }}
        run: |
          sudo mkdir -p /chroot/build
          sudo arch-chroot /chroot su - builder -c "cd /build && makepkg -s --noconfirm"

      - name: Copy built package out of chroot
        run: |
          ls -la /chroot/build/
          sudo find /chroot/build -name "*.pkg.tar.*" -exec cp {} pkgbuilds/${{ matrix.package }}/ \;

      - name: Upload built package
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.package }}-package
          path: pkgbuilds/${{ matrix.package }}/*.pkg.tar.*
          retention-days: 30

  build-ttyd:
    name: Build avf-ttyd
    runs-on: ubuntu-24.04-arm

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install arch-chroot tool
        run: |
          sudo apt-get update
          sudo apt-get install -y arch-install-scripts

      - name: Cache Arch Linux ARM chroot
        id: cache-chroot
        uses: actions/cache@v4
        with:
          path: /tmp/chroot-cache.tar.zst
          key: archlinuxarm-chroot-ttyd-${{ hashFiles('.github/workflows/build-packages.yml') }}
          restore-keys: |
            archlinuxarm-chroot-ttyd-

      - name: Setup Arch Linux ARM chroot
        run: |
          if [ -f /tmp/chroot-cache.tar.zst ]; then
            echo "Restoring chroot from cache..."
            sudo mkdir -p /chroot
            sudo tar -xf /tmp/chroot-cache.tar.zst -C /
          else
            echo "Setting up new chroot..."
            wget http://os.archlinuxarm.org/os/ArchLinuxARM-aarch64-latest.tar.gz
            sudo mkdir -p /chroot
            sudo tar -xzf ArchLinuxARM-aarch64-latest.tar.gz -C /chroot
            sudo sed -i 's/^CheckSpace/#CheckSpace/' /chroot/etc/pacman.conf
            sudo arch-chroot /chroot pacman-key --init
            sudo arch-chroot /chroot pacman-key --populate archlinuxarm
            sudo arch-chroot /chroot pacman -Syu --noconfirm
            sudo arch-chroot /chroot pacman -S --noconfirm base-devel git cmake json-c openssl zlib vim wget libuv libwebsockets
            echo "Caching chroot..."
            sudo tar -cf /tmp/chroot-cache.tar.zst -C / chroot
          fi
          sudo arch-chroot /chroot useradd -m builder 2>/dev/null || true
          sudo mkdir -p /chroot/build

      - name: Build avf-ttyd
        run: |
          sudo cp -r pkgbuilds/avf-ttyd/* /chroot/build/
          sudo arch-chroot /chroot chown -R builder:builder /build
          sudo arch-chroot /chroot su - builder -c "cd /build && makepkg -s --noconfirm"
          sudo find /chroot/build -name "*.pkg.tar.*" -exec cp {} pkgbuilds/avf-ttyd/ \;

      - name: Upload built package
        uses: actions/upload-artifact@v4
        with:
          name: avf-ttyd-package
          path: pkgbuilds/avf-ttyd/*.pkg.tar.*
          retention-days: 30

  build-kernel:
    name: Build linux-avf kernel
    runs-on: ubuntu-24.04-arm
    timeout-minutes: 180

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install arch-chroot tool
        run: |
          sudo apt-get update
          sudo apt-get install -y arch-install-scripts

      - name: Cache Arch Linux ARM chroot
        id: cache-chroot
        uses: actions/cache@v4
        with:
          path: /tmp/chroot-cache.tar.zst
          key: archlinuxarm-chroot-kernel-${{ hashFiles('.github/workflows/build-packages.yml') }}
          restore-keys: |
            archlinuxarm-chroot-kernel-

      - name: Setup Arch Linux ARM chroot
        run: |
          if [ -f /tmp/chroot-cache.tar.zst ]; then
            echo "Restoring chroot from cache..."
            sudo mkdir -p /chroot
            sudo tar -xf /tmp/chroot-cache.tar.zst -C /
          else
            echo "Setting up new chroot..."
            wget http://os.archlinuxarm.org/os/ArchLinuxARM-aarch64-latest.tar.gz
            sudo mkdir -p /chroot
            sudo tar -xzf ArchLinuxARM-aarch64-latest.tar.gz -C /chroot
            sudo sed -i 's/^CheckSpace/#CheckSpace/' /chroot/etc/pacman.conf
            sudo arch-chroot /chroot pacman-key --init
            sudo arch-chroot /chroot pacman-key --populate archlinuxarm
            sudo arch-chroot /chroot pacman -Syu --noconfirm
            sudo arch-chroot /chroot pacman -S --noconfirm base-devel git bc kmod inetutils cpio perl tar xz gettext libelf pahole python
            echo "Caching chroot..."
            sudo tar -cf /tmp/chroot-cache.tar.zst -C / chroot
          fi
          sudo arch-chroot /chroot useradd -m builder 2>/dev/null || true

      - name: Build linux-avf
        run: |
          sudo mkdir -p /chroot/build
          sudo cp -r pkgbuilds/linux-avf/* /chroot/build/
          sudo arch-chroot /chroot chown -R builder:builder /build
          sudo arch-chroot /chroot su - builder -c "cd /build && makepkg -s --noconfirm --skippgpcheck"
          sudo find /chroot/build -name "*.pkg.tar.*" -exec cp {} pkgbuilds/linux-avf/ \;

      - name: Upload built package
        uses: actions/upload-artifact@v4
        with:
          name: linux-avf-package
          path: pkgbuilds/linux-avf/*.pkg.tar.*
          retention-days: 30

  build-systemd:
    name: Build systemd-avf
    runs-on: ubuntu-24.04-arm
    timeout-minutes: 120

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install arch-chroot tool
        run: |
          sudo apt-get update
          sudo apt-get install -y arch-install-scripts

      - name: Cache Arch Linux ARM chroot
        id: cache-chroot
        uses: actions/cache@v4
        with:
          path: /tmp/chroot-cache.tar.zst
          key: archlinuxarm-chroot-systemd-${{ hashFiles('.github/workflows/build-packages.yml') }}
          restore-keys: |
            archlinuxarm-chroot-systemd-

      - name: Setup Arch Linux ARM chroot
        run: |
          if [ -f /tmp/chroot-cache.tar.zst ]; then
            echo "Restoring chroot from cache..."
            sudo mkdir -p /chroot
            sudo tar -xf /tmp/chroot-cache.tar.zst -C /
          else
            echo "Setting up new chroot..."
            wget http://os.archlinuxarm.org/os/ArchLinuxARM-aarch64-latest.tar.gz
            sudo mkdir -p /chroot
            sudo tar -xzf ArchLinuxARM-aarch64-latest.tar.gz -C /chroot
            sudo sed -i 's/^CheckSpace/#CheckSpace/' /chroot/etc/pacman.conf
            sudo arch-chroot /chroot pacman-key --init
            sudo arch-chroot /chroot pacman-key --populate archlinuxarm
            sudo arch-chroot /chroot pacman -Syu --noconfirm
            sudo arch-chroot /chroot pacman -S --noconfirm base-devel git meson ninja gperf acl cryptsetup docbook-xsl lz4 xz pam libelf intltool iptables kmod libcap libidn2 libgcrypt libmicrohttpd libxcrypt libxslt util-linux linux-api-headers python-jinja python-lxml quota-tools shadow libseccomp pcre2 audit kexec-tools libxkbcommon bash-completion p11-kit systemd rsync bpf libbpf clang llvm curl gnutls python-pyelftools libpwquality tpm2-tss python-pefile qrencode
            echo "Caching chroot..."
            sudo tar -cf /tmp/chroot-cache.tar.zst -C / chroot
          fi
          sudo arch-chroot /chroot useradd -m builder 2>/dev/null || true
          sudo mkdir -p /chroot/build

      - name: Build systemd-avf
        run: |
          sudo cp -r pkgbuilds/systemd-avf/* /chroot/build/
          sudo arch-chroot /chroot chown -R builder:builder /build
          sudo arch-chroot /chroot su - builder -c "cd /build && makepkg -s --noconfirm"
          sudo find /chroot/build -name "*.pkg.tar.*" -exec cp {} pkgbuilds/systemd-avf/ \;

      - name: Upload built package
        uses: actions/upload-artifact@v4
        with:
          name: systemd-avf-package
          path: pkgbuilds/systemd-avf/*.pkg.tar.*
          retention-days: 30

  create-repository:
    name: Create Package Repository
    runs-on: ubuntu-24.04-arm
    needs: [build-rust-services, build-ttyd, build-kernel, build-systemd]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install arch-install-scripts
        run: |
          sudo apt-get update
          sudo apt-get install -y arch-install-scripts

      - name: Download all packages
        uses: actions/download-artifact@v4
        with:
          path: built-packages
          pattern: '*-package'

      - name: Set up package repository
        run: |
          mkdir -p repo/aarch64

          # Move all packages to repo directory
          find built-packages -name "*.pkg.tar.*" -exec cp {} repo/aarch64/ \;

          # List packages
          echo "Built packages:"
          ls -lh repo/aarch64/

      - name: Create repository database
        run: |
          wget http://os.archlinuxarm.org/os/ArchLinuxARM-aarch64-latest.tar.gz
          sudo mkdir -p /chroot
          sudo tar -xzf ArchLinuxARM-aarch64-latest.tar.gz -C /chroot
          sudo cp -r repo /chroot/
          sudo arch-chroot /chroot bash -c 'cd /repo/aarch64 && repo-add aarch64.db.tar.gz *.pkg.tar.*'
          sudo cp -r /chroot/repo/* repo/

      - name: Upload repository
        uses: actions/upload-artifact@v4
        with:
          name: arch-avf-repository
          path: repo/
          retention-days: 90

      - name: Generate repository info
        run: |
          echo "# Package Repository" > repo/README.md
          echo "" >> repo/README.md
          echo "Built packages from commit: ${{ github.sha }}" >> repo/README.md
          echo "" >> repo/README.md
          echo "## Packages" >> repo/README.md
          ls -1 repo/aarch64/*.pkg.tar.* | xargs -n1 basename >> repo/README.md

  build-image:
    name: Build Bootable Image
    runs-on: ubuntu-24.04-arm
    needs: [create-repository]
    if: github.ref == 'refs/heads/main'
    timeout-minutes: 60

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install required tools
        run: |
          sudo apt-get update
          sudo apt-get install -y arch-install-scripts parted dosfstools e2fsprogs rsync pigz

      - name: Cache Arch Linux ARM rootfs
        id: cache-rootfs
        uses: actions/cache@v4
        with:
          path: /tmp/rootfs-cache.tar.zst
          key: archlinuxarm-rootfs-${{ hashFiles('scripts/10-build-rootfs.sh') }}

      - name: Download package repository
        uses: actions/download-artifact@v4
        with:
          name: arch-avf-repository
          path: repo

      - name: List repository contents
        run: |
          echo "Package repository contents:"
          ls -lh repo/aarch64/

      - name: Build root filesystem
        run: |
          ./scripts/10-build-rootfs.sh

      - name: Install packages
        run: |
          ./scripts/20-install-packages.sh

      - name: Configure system
        run: |
          ./scripts/30-configure-system.sh

      - name: Create disk image
        run: |
          ./scripts/40-create-disk-image.sh

      - name: Package for AVF
        run: |
          ./scripts/50-package-image.sh

      - name: Upload bootable image
        uses: actions/upload-artifact@v4
        with:
          name: arch-avf-image
          path: build/image-*.tar.gz*
          retention-days: 90

      - name: Generate release info
        run: |
          BUILD_ID=$(cat build/build_id)
          IMAGE_FILE=$(ls build/image-*.tar.gz)
          IMAGE_SIZE=$(du -h "${IMAGE_FILE}" | cut -f1)
          echo "## Arch Linux ARM for AVF" > build/RELEASE_INFO.md
          echo "" >> build/RELEASE_INFO.md
          echo "**Build ID**: ${BUILD_ID}" >> build/RELEASE_INFO.md
          echo "**Build Date**: $(date)" >> build/RELEASE_INFO.md
          echo "**Commit**: ${{ github.sha }}" >> build/RELEASE_INFO.md
          echo "**Size**: ${IMAGE_SIZE}" >> build/RELEASE_INFO.md
          echo "" >> build/RELEASE_INFO.md
          echo "### Installation" >> build/RELEASE_INFO.md
          echo '```bash' >> build/RELEASE_INFO.md
          echo "adb push ${IMAGE_FILE##*/} /sdcard/linux/images.tar.gz" >> build/RELEASE_INFO.md
          echo '```' >> build/RELEASE_INFO.md

      - name: Upload release info
        uses: actions/upload-artifact@v4
        with:
          name: release-info
          path: build/RELEASE_INFO.md
          retention-days: 90
